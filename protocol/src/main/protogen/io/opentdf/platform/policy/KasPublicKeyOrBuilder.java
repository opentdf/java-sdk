// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: policy/objects.proto

// Protobuf Java Version: 3.25.3
package io.opentdf.platform.policy;

public interface KasPublicKeyOrBuilder extends
    // @@protoc_insertion_point(interface_extends:policy.KasPublicKey)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * x509 ASN.1 content in PEM envelope, usually
   * </pre>
   *
   * <code>string pem = 1 [json_name = "pem"];</code>
   * @return The pem.
   */
  java.lang.String getPem();
  /**
   * <pre>
   * x509 ASN.1 content in PEM envelope, usually
   * </pre>
   *
   * <code>string pem = 1 [json_name = "pem"];</code>
   * @return The bytes for pem.
   */
  com.google.protobuf.ByteString
      getPemBytes();

  /**
   * <pre>
   * A unique string identifier for this key
   * </pre>
   *
   * <code>string kid = 2 [json_name = "kid"];</code>
   * @return The kid.
   */
  java.lang.String getKid();
  /**
   * <pre>
   * A unique string identifier for this key
   * </pre>
   *
   * <code>string kid = 2 [json_name = "kid"];</code>
   * @return The bytes for kid.
   */
  com.google.protobuf.ByteString
      getKidBytes();

  /**
   * <pre>
   * A known algorithm type with any additional parameters encoded.
   * To start, these may be `rsa:2048` for encrypting ZTDF files and 
   * `ec:secp256r1` for nanoTDF, but more formats may be added as needed.
   * </pre>
   *
   * <code>.policy.KasPublicKeyAlgEnum alg = 3 [json_name = "alg"];</code>
   * @return The enum numeric value on the wire for alg.
   */
  int getAlgValue();
  /**
   * <pre>
   * A known algorithm type with any additional parameters encoded.
   * To start, these may be `rsa:2048` for encrypting ZTDF files and 
   * `ec:secp256r1` for nanoTDF, but more formats may be added as needed.
   * </pre>
   *
   * <code>.policy.KasPublicKeyAlgEnum alg = 3 [json_name = "alg"];</code>
   * @return The alg.
   */
  io.opentdf.platform.policy.KasPublicKeyAlgEnum getAlg();
}

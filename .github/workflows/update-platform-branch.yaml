name: "Update Platform Branch"
# This workflow updates the platform.branch property in all pom.xml files to a new tag or branch.
# It is triggered by a manual dispatch or by a call from another workflow - notably from platform changes to protocol/go.
# This property is used to select which versions of the protocol buffer definitions to use.
#
# To test:
#   `act workflow_dispatch -W ./.github/workflows/update-platform-branch.yaml --input tag=protocol/go/v0.3.1`

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      tag:
        description: "The new tag or branch to update the platform.branch property to use for targeting the RPC protocol buffers."
        required: true
        default: "protocol/go/v0.3.0"

jobs:
  update-platform-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: read

    steps:
      - name: Checkout java-sdk repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: true # Required for "commit changes" and push steps below

      - name: Validate tag as a valid git ref
        run: |
          if ! echo "$TAG" | grep -Eq "^[a-zA-Z0-9._\-\/]+$"; then
            echo "Invalid tag format: [$TAG]"
            exit 1
          fi
          echo "TAG=$TAG" >> $GITHUB_ENV
        env:
          TAG: ${{ github.event.inputs.tag }}

      - name: Check if tag exists in the repository
        run: |
          if ! git ls-remote --exit-code --heads --tags https://github.com/opentdf/platform.git "$TAG"; then
            echo "Tag or branch [$TAG] does not exist in the platform repository."
            exit 1
          fi

      - name: Update platform.branch in pom.xml files
        run: |
            find . -name "pom.xml" -exec sed -i.bak "s|<platform.branch>.*</platform.branch>|<platform.branch>${TAG}</platform.branch>|g" {} \;
            CHANGED_FILES=$(find . -name "pom.xml.bak" -exec diff -u {} $(echo {} | sed 's/.bak$//') \;)
            if [ -z "$CHANGED_FILES" ]; then
              echo "No changes detected in pom.xml files." | tee -a $GITHUB_STEP_SUMMARY
              find . -name "pom.xml.bak" -delete
              exit 1
            fi
            find . -name "pom.xml.bak" -delete

      - name: Fetch release notes for the tag
        id: fetch-release-notes
        run: |
          RELEASE_URL="https://api.github.com/repos/opentdf/platform/releases/tags/$TAG"
          RESPONSE=$(curl -s -H "Accept: application/vnd.github.v3+json" "$RELEASE_URL")
          RELEASE_NOTES=$(echo "$RESPONSE" | jq -r '.body // ""')
          if [ "$RELEASE_NOTES" = "" ]; then
            echo "No release notes found for tag $TAG."
          fi
          echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_ENV
          echo "RELEASE_URL=https://github.com/opentdf/platform/releases/tag/$TAG" >> $GITHUB_ENV

      - name: Commit and changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b update-platform-branch
          git add .
          if [ -n "$RELEASE_NOTES" ]; then
            git commit -m "fix(sdk): Updates to proto version $TAG\n\nRelease Notes:\n$RELEASE_NOTES\n\nSee the release: $RELEASE_URL"
          else
            git commit -m "fix(sdk): Updates to proto version $TAG\n\nSee the release: $RELEASE_URL"
          fi
          git push origin update-platform-branch

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7.0.8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "fix(sdk): Updates to proto version ${{ github.event.inputs.tag }}"
          branch: update-platform-branch
          title: "fix(sdk): Updates to proto version ${{ github.event.inputs.tag }}"
          body: |
            This PR updates the platform.branch property in all pom.xml files to the new tag or branch: ${{ github.event.inputs.tag }}.

            See the release: $RELEASE_URL

            Release Notes:
            $RELEASE_NOTES
          labels: "automated-update"
